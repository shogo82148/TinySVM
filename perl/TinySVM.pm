# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package TinySVM;
use base qw(Exporter);
use base qw(DynaLoader);
package TinySVMc;
bootstrap TinySVM;
package TinySVM;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package TinySVM;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package TinySVM;


############# Class : TinySVM::BaseExample ##############

package TinySVM::BaseExample;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( TinySVM );
%OWNER = ();
%ITERATORS = ();
*add = *TinySVMc::BaseExample_add;
*set = *TinySVMc::BaseExample_set;
*get = *TinySVMc::BaseExample_get;
*remove = *TinySVMc::BaseExample_remove;
*clear = *TinySVMc::BaseExample_clear;
*size = *TinySVMc::BaseExample_size;
*read = *TinySVMc::BaseExample_read;
*write = *TinySVMc::BaseExample_write;
*readLine = *TinySVMc::BaseExample_readLine;
*readSVindex = *TinySVMc::BaseExample_readSVindex;
*writeSVindex = *TinySVMc::BaseExample_writeSVindex;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        TinySVMc::delete_BaseExample($self);
        delete $OWNER{$self};
    }
}

*getY = *TinySVMc::BaseExample_getY;
*getX = *TinySVMc::BaseExample_getX;
*getAlpha = *TinySVMc::BaseExample_getAlpha;
*getGradient = *TinySVMc::BaseExample_getGradient;
*getG = *TinySVMc::BaseExample_getG;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : TinySVM::Model ##############

package TinySVM::Model;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( TinySVM::BaseExample TinySVM );
%OWNER = ();
%ITERATORS = ();
*read = *TinySVMc::Model_read;
*write = *TinySVMc::Model_write;
*clear = *TinySVMc::Model_clear;
*classify = *TinySVMc::Model_classify;
*estimateMargin = *TinySVMc::Model_estimateMargin;
*estimateSphere = *TinySVMc::Model_estimateSphere;
*estimateVC = *TinySVMc::Model_estimateVC;
*estimateXA = *TinySVMc::Model_estimateXA;
*compress = *TinySVMc::Model_compress;
*getSVnum = *TinySVMc::Model_getSVnum;
*getBSVnum = *TinySVMc::Model_getBSVnum;
*getTrainingDataSize = *TinySVMc::Model_getTrainingDataSize;
*getLoss = *TinySVMc::Model_getLoss;
sub new {
    my $pkg = shift;
    my $self = TinySVMc::new_Model(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        TinySVMc::delete_Model($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : TinySVM::Example ##############

package TinySVM::Example;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( TinySVM::BaseExample TinySVM );
%OWNER = ();
%ITERATORS = ();
*read = *TinySVMc::Example_read;
*write = *TinySVMc::Example_write;
*rebuildSVindex = *TinySVMc::Example_rebuildSVindex;
sub new {
    my $pkg = shift;
    my $self = TinySVMc::new_Example(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        TinySVMc::delete_Example($self);
        delete $OWNER{$self};
    }
}

*learn = *TinySVMc::Example_learn;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package TinySVM;

*LINEAR = *TinySVMc::LINEAR;
*POLY = *TinySVMc::POLY;
*NEURAL = *TinySVMc::NEURAL;
*RBF = *TinySVMc::RBF;
*ANOVA = *TinySVMc::ANOVA;
*DOUBLE_FEATURE = *TinySVMc::DOUBLE_FEATURE;
*BINARY_FEATURE = *TinySVMc::BINARY_FEATURE;
*SVM = *TinySVMc::SVM;
*SVR = *TinySVMc::SVR;
*ONE_CLASS = *TinySVMc::ONE_CLASS;
1;
