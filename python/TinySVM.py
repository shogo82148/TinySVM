# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TinySVM', [dirname(__file__)])
        except ImportError:
            import _TinySVM
            return _TinySVM
        if fp is not None:
            try:
                _mod = imp.load_module('_TinySVM', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TinySVM = swig_import_helper()
    del swig_import_helper
else:
    import _TinySVM
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


LINEAR = _TinySVM.LINEAR
POLY = _TinySVM.POLY
NEURAL = _TinySVM.NEURAL
RBF = _TinySVM.RBF
ANOVA = _TinySVM.ANOVA
DOUBLE_FEATURE = _TinySVM.DOUBLE_FEATURE
BINARY_FEATURE = _TinySVM.BINARY_FEATURE
SVM = _TinySVM.SVM
SVR = _TinySVM.SVR
ONE_CLASS = _TinySVM.ONE_CLASS
class BaseExample(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseExample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseExample, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def add(self, *args): return _TinySVM.BaseExample_add(self, *args)
    def set(self, *args): return _TinySVM.BaseExample_set(self, *args)
    def get(self, *args): return _TinySVM.BaseExample_get(self, *args)
    def remove(self, *args): return _TinySVM.BaseExample_remove(self, *args)
    def clear(self): return _TinySVM.BaseExample_clear(self)
    def size(self): return _TinySVM.BaseExample_size(self)
    def read(self, *args): return _TinySVM.BaseExample_read(self, *args)
    def write(self, *args): return _TinySVM.BaseExample_write(self, *args)
    def readLine(self, *args): return _TinySVM.BaseExample_readLine(self, *args)
    def readSVindex(self, *args): return _TinySVM.BaseExample_readSVindex(self, *args)
    def writeSVindex(self, *args): return _TinySVM.BaseExample_writeSVindex(self, *args)
    __swig_destroy__ = _TinySVM.delete_BaseExample
    __del__ = lambda self : None;
    def getY(self, *args): return _TinySVM.BaseExample_getY(self, *args)
    def getX(self, *args): return _TinySVM.BaseExample_getX(self, *args)
    def getAlpha(self, *args): return _TinySVM.BaseExample_getAlpha(self, *args)
    def getGradient(self, *args): return _TinySVM.BaseExample_getGradient(self, *args)
    def getG(self, *args): return _TinySVM.BaseExample_getG(self, *args)
BaseExample_swigregister = _TinySVM.BaseExample_swigregister
BaseExample_swigregister(BaseExample)

class Model(BaseExample):
    __swig_setmethods__ = {}
    for _s in [BaseExample]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseExample]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    def read(self, *args): return _TinySVM.Model_read(self, *args)
    def write(self, *args): return _TinySVM.Model_write(self, *args)
    def clear(self): return _TinySVM.Model_clear(self)
    def classify(self, *args): return _TinySVM.Model_classify(self, *args)
    def estimateMargin(self): return _TinySVM.Model_estimateMargin(self)
    def estimateSphere(self): return _TinySVM.Model_estimateSphere(self)
    def estimateVC(self): return _TinySVM.Model_estimateVC(self)
    def estimateXA(self, rho=2.0): return _TinySVM.Model_estimateXA(self, rho)
    def compress(self): return _TinySVM.Model_compress(self)
    def getSVnum(self): return _TinySVM.Model_getSVnum(self)
    def getBSVnum(self): return _TinySVM.Model_getBSVnum(self)
    def getTrainingDataSize(self): return _TinySVM.Model_getTrainingDataSize(self)
    def getLoss(self): return _TinySVM.Model_getLoss(self)
    def __init__(self, *args): 
        this = _TinySVM.new_Model(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TinySVM.delete_Model
    __del__ = lambda self : None;
Model_swigregister = _TinySVM.Model_swigregister
Model_swigregister(Model)

class Example(BaseExample):
    __swig_setmethods__ = {}
    for _s in [BaseExample]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Example, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseExample]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Example, name)
    __repr__ = _swig_repr
    def read(self, *args): return _TinySVM.Example_read(self, *args)
    def write(self, *args): return _TinySVM.Example_write(self, *args)
    def rebuildSVindex(self, *args): return _TinySVM.Example_rebuildSVindex(self, *args)
    def __init__(self): 
        this = _TinySVM.new_Example()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TinySVM.delete_Example
    __del__ = lambda self : None;
    def learn(self, *args): return _TinySVM.Example_learn(self, *args)
Example_swigregister = _TinySVM.Example_swigregister
Example_swigregister(Example)

# This file is compatible with both classic and new-style classes.


