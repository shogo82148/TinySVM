# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TinySVM
else:
    import _TinySVM

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


LINEAR = _TinySVM.LINEAR
POLY = _TinySVM.POLY
NEURAL = _TinySVM.NEURAL
RBF = _TinySVM.RBF
ANOVA = _TinySVM.ANOVA
DOUBLE_FEATURE = _TinySVM.DOUBLE_FEATURE
BINARY_FEATURE = _TinySVM.BINARY_FEATURE
SVM = _TinySVM.SVM
SVR = _TinySVM.SVR
ONE_CLASS = _TinySVM.ONE_CLASS
class BaseExample(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def add(self, *args):
        return _TinySVM.BaseExample_add(self, *args)

    def set(self, *args):
        return _TinySVM.BaseExample_set(self, *args)

    def get(self, *args):
        return _TinySVM.BaseExample_get(self, *args)

    def remove(self, i):
        return _TinySVM.BaseExample_remove(self, i)

    def clear(self):
        return _TinySVM.BaseExample_clear(self)

    def size(self):
        return _TinySVM.BaseExample_size(self)

    def read(self, *args):
        return _TinySVM.BaseExample_read(self, *args)

    def write(self, *args):
        return _TinySVM.BaseExample_write(self, *args)

    def readLine(self, arg2):
        return _TinySVM.BaseExample_readLine(self, arg2)

    def readSVindex(self, *args):
        return _TinySVM.BaseExample_readSVindex(self, *args)

    def writeSVindex(self, *args):
        return _TinySVM.BaseExample_writeSVindex(self, *args)
    __swig_destroy__ = _TinySVM.delete_BaseExample

    def getY(self, i):
        return _TinySVM.BaseExample_getY(self, i)

    def getX(self, i):
        return _TinySVM.BaseExample_getX(self, i)

    def getAlpha(self, i):
        return _TinySVM.BaseExample_getAlpha(self, i)

    def getGradient(self, i):
        return _TinySVM.BaseExample_getGradient(self, i)

    def getG(self, i):
        return _TinySVM.BaseExample_getG(self, i)

# Register BaseExample in _TinySVM:
_TinySVM.BaseExample_swigregister(BaseExample)

class Model(BaseExample):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def read(self, *args):
        return _TinySVM.Model_read(self, *args)

    def write(self, *args):
        return _TinySVM.Model_write(self, *args)

    def clear(self):
        return _TinySVM.Model_clear(self)

    def classify(self, *args):
        return _TinySVM.Model_classify(self, *args)

    def estimateMargin(self):
        return _TinySVM.Model_estimateMargin(self)

    def estimateSphere(self):
        return _TinySVM.Model_estimateSphere(self)

    def estimateVC(self):
        return _TinySVM.Model_estimateVC(self)

    def estimateXA(self, rho=2.0):
        return _TinySVM.Model_estimateXA(self, rho)

    def compress(self):
        return _TinySVM.Model_compress(self)

    def getSVnum(self):
        return _TinySVM.Model_getSVnum(self)

    def getBSVnum(self):
        return _TinySVM.Model_getBSVnum(self)

    def getTrainingDataSize(self):
        return _TinySVM.Model_getTrainingDataSize(self)

    def getLoss(self):
        return _TinySVM.Model_getLoss(self)

    def __init__(self, *args):
        _TinySVM.Model_swiginit(self, _TinySVM.new_Model(*args))
    __swig_destroy__ = _TinySVM.delete_Model

# Register Model in _TinySVM:
_TinySVM.Model_swigregister(Model)

class Example(BaseExample):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def read(self, *args):
        return _TinySVM.Example_read(self, *args)

    def write(self, *args):
        return _TinySVM.Example_write(self, *args)

    def rebuildSVindex(self, m):
        return _TinySVM.Example_rebuildSVindex(self, m)

    def __init__(self):
        _TinySVM.Example_swiginit(self, _TinySVM.new_Example())
    __swig_destroy__ = _TinySVM.delete_Example

    def learn(self, *args):
        return _TinySVM.Example_learn(self, *args)

# Register Example in _TinySVM:
_TinySVM.Example_swigregister(Example)



